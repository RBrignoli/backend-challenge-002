import os

import click
import tenjin
from tenjin.helpers import *

from startapp import VERSION


@click.group()
@click.version_option(version=VERSION, prog_name='django-startapp')
def startapp():  # pragma: no cover
    pass


@click.command()
@click.argument('name')
def create(name):
    """
    Create new django app

    \b
    NAME is the name of your new app (e.g. 'new-app').
    """
    if not os.path.exists(name):
        os.makedirs(name)

    context = {
        'name': name,
    }

    # create engine object
    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    engine = tenjin.Engine(path=['{}/startapp/templates'.format(BASE_DIR)])

    # render templates with context data
    # Models
    file = engine.render('models.txt', context)
    models_file = open('{}/models.py'.format(name), 'w')
    models_file.write(file)
    models_file.close()

    # Apps
    file = engine.render('apps.txt', context)
    apps_file = open('{}/apps.py'.format(name), 'w')
    apps_file.write(file)
    apps_file.close()

    # Admin
    file = engine.render('admin.txt', context)
    admin_file = open('{}/admin.py'.format(name), 'w')
    admin_file.write(file)
    admin_file.close()

    # constants
    file = engine.render('constants.txt', context)
    constants_file = open('{}/constants.py'.format(name), 'w')
    constants_file.write(file)
    constants_file.close()

    # __init__
    file = engine.render('__init__.txt', context)
    init_file = open('{}/__init__.py'.format(name), 'w')
    init_file.write(file)
    init_file.close()

    # main-urls
    file = engine.render('main-urls.txt', context)
    urls_file = open('{}/urls.py'.format(name), 'w')
    urls_file.write(file)
    urls_file.close()

    # signals
    file = engine.render('signals.txt', context)
    signals_file = open('{}/signals.py'.format(name), 'w')
    signals_file.write(file)
    signals_file.close()

    # Create migrations folder
    if not os.path.exists('{}/migrations'.format(name)):
        os.makedirs('{}/migrations'.format(name))

    migrations_init_file = open('{}/migrations/__init__.py'.format(name), 'w')
    migrations_init_file.write('')
    migrations_init_file.close()

    # Create API folders
    if not os.path.exists('{}/api'.format(name)):
        os.makedirs('{}/api'.format(name))

    if not os.path.exists('{}/api/v1'.format(name)):
        os.makedirs('{}/api/v1'.format(name))

    # API Permissions
    file = engine.render('api_permissions.txt', context)
    permissions_file = open('{}/api/v1/permissions.py'.format(name), 'w')
    permissions_file.write(file)
    permissions_file.close()

    # API Views
    file = engine.render('api_views.txt', context)
    views_file = open('{}/api/v1/views.py'.format(name), 'w')
    views_file.write(file)
    views_file.close()

    # API Serializers
    file = engine.render('api_serializers.txt', context)
    serializers_file = open('{}/api/v1/serializers.py'.format(name), 'w')
    serializers_file.write(file)
    serializers_file.close()

    # API Urls
    file = engine.render('api_urls.txt', context)
    urls_file = open('{}/api/v1/urls.py'.format(name), 'w')
    urls_file.write(file)
    urls_file.close()


startapp.add_command(create)

if __name__ == '__main__':  # pragma: no cover
    startapp()
