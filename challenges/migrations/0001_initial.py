# Generated by Django 3.0.3 on 2020-11-12 16:59

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ChallengeTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.CharField(choices=[('trust_more_and_stress_less', 'Trust More And Stress Less'), ('have_refreshing_rest', 'Have Refreshing Rest'), ('enjoy_sunlight', 'Enjoy Sunlight'), ('nutrition', 'Nutrition'), ('exercise', 'Exercise'), ('water', 'Water'), ('live_temperately', 'Live Temperately'), ('invest_in_others', 'Invest In Others'), ('fresh_air', 'Fresh Air'), ('education', 'Education'), ('super_challenge', 'Super Challenge')], max_length=32, verbose_name='category')),
                ('title', models.CharField(blank=True, max_length=256, null=True, verbose_name='title')),
                ('text', models.TextField(blank=True, null=True, verbose_name='text')),
                ('is_super', models.BooleanField(blank=True, default=False, verbose_name='is super')),
                ('score', models.PositiveSmallIntegerField(blank=True, default=(1,), verbose_name='score')),
                ('URLName', models.SlugField(max_length=255, unique=True)),
                ('relative_week', models.SmallIntegerField(validators=[django.core.validators.MaxValueValidator(10)], verbose_name='week number')),
                ('relative_day', models.SmallIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(7)], verbose_name='day number')),
            ],
        ),
        migrations.CreateModel(
            name='CorporationChallenge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.CharField(choices=[('trust_more_and_stress_less', 'Trust More And Stress Less'), ('have_refreshing_rest', 'Have Refreshing Rest'), ('enjoy_sunlight', 'Enjoy Sunlight'), ('nutrition', 'Nutrition'), ('exercise', 'Exercise'), ('water', 'Water'), ('live_temperately', 'Live Temperately'), ('invest_in_others', 'Invest In Others'), ('fresh_air', 'Fresh Air'), ('education', 'Education'), ('super_challenge', 'Super Challenge')], max_length=32, verbose_name='category')),
                ('title', models.CharField(blank=True, max_length=256, null=True, verbose_name='title')),
                ('text', models.TextField(blank=True, null=True, verbose_name='text')),
                ('is_super', models.BooleanField(blank=True, default=False, verbose_name='is super')),
                ('score', models.PositiveSmallIntegerField(blank=True, default=(1,), verbose_name='score')),
                ('URLName', models.SlugField(max_length=255, unique=True)),
                ('date', models.DateField(blank=True, null=True, verbose_name='date')),
                ('completed_users', models.ManyToManyField(blank=True, related_name='completed_challenges', to=settings.AUTH_USER_MODEL, verbose_name='completed users')),
                ('corporation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenges', to='accounts.Corporation', verbose_name='corporation')),
                ('parent_template', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_challenges', to='challenges.ChallengeTemplate', verbose_name='parent template')),
                ('skipped_users', models.ManyToManyField(blank=True, related_name='skipped_challenges', to=settings.AUTH_USER_MODEL, verbose_name='skipped users')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='challengetemplate',
            constraint=models.UniqueConstraint(fields=('category', 'relative_week', 'relative_day'), name='unique_challenge_template'),
        ),
    ]
